import { Disposable } from 'vscode-languageserver-protocol';
import Document from '../model/document';
import { CompleteConfig, CompleteOption, PopupChangeEvent } from '../types';
import Complete from './complete';
export interface LastInsert {
    character: string;
    timestamp: number;
}
export declare class Completion implements Disposable {
    config: CompleteConfig;
    private document;
    private floating;
    private currItem;
    private activated;
    private input;
    private lastInsert?;
    private disposables;
    private complete;
    private recentScores;
    private resolveTokenSource;
    private changedTick;
    private insertCharTs;
    private insertLeaveTs;
    private isResolving;
    init(): void;
    private get nvim();
    get option(): CompleteOption;
    private addRecent;
    private getPreviousContent;
    getResumeInput(pre: string): string;
    private get bufnr();
    get isActivated(): boolean;
    private getCompleteConfig;
    startCompletion(option: CompleteOption): Promise<void>;
    private resumeCompletion;
    hasSelected(): boolean;
    private showCompletion;
    private _doComplete;
    private onTextChangedP;
    private onTextChangedI;
    private triggerCompletion;
    private fixCompleteOption;
    private onCompleteDone;
    private onInsertLeave;
    private onInsertEnter;
    private onInsertCharPre;
    private get latestInsert();
    private get latestInsertChar();
    shouldTrigger(document: Document, pre: string): Promise<boolean>;
    onPumChange(ev: PopupChangeEvent): Promise<void>;
    start(complete: Complete): void;
    private cancel;
    stop(): void;
    private getInput;
    private get completeOpt();
    private getCompleteItem;
    dispose(): void;
}
declare const _default: Completion;
export default _default;
