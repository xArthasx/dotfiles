/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const workspace_1 = tslib_1.__importDefault(require("../workspace"));
const _disposables = new Map();
class ProgressPart {
    constructor(_client, _token) {
        this._client = _client;
        this._token = _token;
        if (_disposables.has(_token)) {
            workspace_1.default.showMessage(`Progress for token ${_token} already registered`, 'warning');
            return;
        }
        this._workDoneStatus = workspace_1.default.createStatusBarItem(99, { progress: true });
        this._disposable = this._client.onProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, value => {
            switch (value.kind) {
                case 'begin':
                    this.begin(value);
                    break;
                case 'report':
                    this.report(value);
                    break;
                case 'end':
                    this.done();
                    break;
            }
        });
        _disposables.set(_token, this._disposable);
    }
    begin(params) {
        // TODO: WorkDoneProgressCancelNotification
        this._title = params.title;
        this.report(params);
    }
    report(params) {
        this._message = params.message ? params.message : '';
        this._percentage = params.percentage ? params.percentage.toFixed(0) + '%' : '';
        this._workDoneStatus.text = `${this._percentage} ${this._title} ${this._message}`;
        this._workDoneStatus.show();
    }
    cancel() {
        var _a, _b;
        _disposables.clear();
        (_a = this._disposable) === null || _a === void 0 ? void 0 : _a.dispose();
        (_b = this._workDoneStatus) === null || _b === void 0 ? void 0 : _b.dispose();
    }
    done() {
        var _a;
        (_a = this._workDoneStatus) === null || _a === void 0 ? void 0 : _a.hide();
    }
}
exports.ProgressPart = ProgressPart;
//# sourceMappingURL=progressPart.js.map