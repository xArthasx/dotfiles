/// <reference types="node" />
import { EventEmitter } from 'events';
import { NeovimClient } from '../api';
export interface Response {
    send: (resp: any, isError?: boolean) => void;
}
export default abstract class Transport extends EventEmitter {
    protected _paused: boolean;
    protected paused: [string, any[]][];
    protected debug(key: string, ...meta: any[]): void;
    protected debugMessage(msg: any[]): void;
    pauseNotification(): void;
    resumeNotification(): Promise<void>;
    resumeNotification(isNotify: true): null;
    abstract attach(writer: NodeJS.WritableStream, reader: NodeJS.ReadableStream, client: NeovimClient): void;
    abstract detach(): void;
    abstract request(method: string, args: any[], cb: Function): any;
    abstract notify(method: string, args: any[]): void;
    protected abstract createResponse(requestId: number): Response;
}
